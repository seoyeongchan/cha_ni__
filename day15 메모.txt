객체를 만들기 위해서는 결국 생성자를 통과해야함

생성자
*** 무조건 클래스의 이름과 똑같은 함수***
함수
반환형이없다

공통속성은 슈퍼클래스 
개별속성은 서브클래스 에게

==============================

자바 클래스의 구성 요소

1. 필드 		속성을 저장하는 변수
2. 메서드 		기능을 정의하는 함수
3. 생성자		객체를 생성하는 함수
4. 접근 제한자	특성에 대한 접근 범위를 지정


자바 객체 지향의 특징

1. 캡슐화	: 서로 다른 자료형의 속성과 기능을 하나의 객체로 묶어서 처리한다

2. 상속	: 기존 클래스의 특성을 물려받아 새로운 클래스 작성
	- 필드와 메서드는 모두 물려받는다(private 제외, protected)
	- 접근제한자는 동일하게 적용받는다
	- 생성자는 어떠한 형태이든 슈퍼클래스의 생성자를 호출해야한다
	- 오버라이딩 메서드는 접근제한자의 범위를 좁힐 수 없다
	- 오버라이딩 메서드는 반환형, 함수이름, 매개변수의 타입과 개수가 모두 일치해야한다
	- final 필드는 값을 수정할 수 없다
	- final 메서드는 오버라이딩 할 수 없다 ( 내용을 변경할 수 없다 )

3. 추상화	: 객체화할 수 없는 클래스, 객체들의 공통 속성만 뽑아서 만든

4. 다형성 	: 하나의 객체는 슈퍼클래스로도 참조될 수 있고, 서브클래스로도 참조될 수 있다
	- 서브클래스의 객체를 슈퍼클래스로 참조하는 행위를 up-casting 이라고 한다
	- up-casting 된 객체를 다시 원래의 서브클래스로 형변환하면 down-casting이라고 한다
	- 서로 다른 유형의 객체를 묶어서 처리하려면 up-casting을 수행한다
	- 각 객체의 고유 메서드를 수행하려면 down-casting 을 수행한다
	- up-casting 된 상태에서도 오버라이딩 메서드는 동일하게 호출할 수 있다
	- up-casting 된 객체가 특정 클래스의 객체가 맞는지 확인하기 위해 instanceof 연산자를 사용한다
	- 자바의 모든 객체는 Object 클래스를 상속하게 되어있다.

=============================================
 


추상클래스

객체화 할수 없고 추상클래스를 상속받을 때는 강제로 오버라이딩해야함

인터페이스의 모든 클래스는 추상메서드.

==========================================

대상을 어떻게 바라보는지 관점에 따라서 행동하는 내용도 달라진다